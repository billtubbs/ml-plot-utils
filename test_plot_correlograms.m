% Test functions plot_correlogram_x_with_conf.m and
% plot_correlogram_auto_conf.m

clear all; close all

% Directory to save test plots
plot_dir = 'plots';
if ~isfolder(plot_dir)
    mkdir(plot_dir)
end

rng(0)


%% Correlogram plot

% Generate white noise
Ts = 1;
%nT = 100;
%e = randn(nT+1, 1);
% For portability, hard-code the input data
e = [
    0.5377    1.8339   -2.2588    0.8622    0.3188   -1.3077 ...
   -0.4336    0.3426    3.5784    2.7694   -1.3499    3.0349 ...
    0.7254   -0.0631    0.7147   -0.2050   -0.1241    1.4897 ...
    1.4090    1.4172    0.6715   -1.2075    0.7172    1.6302 ...
    0.4889    1.0347    0.7269   -0.3034    0.2939   -0.7873 ...
    0.8884   -1.1471   -1.0689   -0.8095   -2.9443    1.4384 ...
    0.3252   -0.7549    1.3703   -1.7115   -0.1022   -0.2414 ...
    0.3192    0.3129   -0.8649   -0.0301   -0.1649    0.6277 ...
    1.0933    1.1093   -0.8637    0.0774   -1.2141   -1.1135 ...
   -0.0068    1.5326   -0.7697    0.3714   -0.2256    1.1174 ...
   -1.0891    0.0326    0.5525    1.1006    1.5442    0.0859 ...
   -1.4916   -0.7423   -1.0616    2.3505   -0.6156    0.7481 ...
   -0.1924    0.8886   -0.7648   -1.4023   -1.4224    0.4882 ...
   -0.1774   -0.1961    1.4193    0.2916    0.1978    1.5877 ...
   -0.8045    0.6966    0.8351   -0.2437    0.2157   -1.1658 ...
   -1.1480    0.1049    0.7223    2.5855   -0.6669    0.1873 ...
   -0.0825   -1.9330   -0.4390   -1.7947    0.8404
]';
nT = length(e) - 1;

% Calculate auto-correlation coefficients
% Note: When first argument of xcov is a vector, it calculates
% the auto-covariance sequence.
maxlag = 20;
[ec, lags] = xcov(e, maxlag, 'coeff');
i0 = find(lags == 0);

[lconf, uconf] = confidence_intervals_auto(nT, ec, maxlag, 0.99);

assert(isequal(round(lconf, 6), [ ...
   0.000000  -0.257583  -0.446147  -0.446149  -0.446569  -0.446649 ...
  -0.451663  -0.452524  -0.452912  -0.452960  -0.459803  -0.460884 ...
  -0.463881  -0.463899  -0.463960  -0.463969  -0.464118  -0.464294 ...
  -0.464329  -0.465592  -0.465666
]))
assert(isequal(round(uconf, 6), [ ...
   0.000000   0.257583   0.446147   0.446149   0.446569   0.446649 ...
   0.451663   0.452524   0.452912   0.452960   0.459803   0.460884 ...
   0.463881   0.463899   0.463960   0.463969   0.464118   0.464294 ...
   0.464329   0.465592   0.465666
]))

% Check all coefficients inside confidence interval
assert(all(ec(i0+1:end)' < uconf(2:end)))
assert(all(ec(i0+1:end)' > lconf(2:end)))

figure(1); clf
plot_correlogram_auto_conf(e, 'Correlogram - white noise')

% Simulate AR process
t = Ts*(0:nT)';
b = 1;
a = [1 -0.9];
y = filter(b, a, e);

% Add noise
sigma = 0.5;
%v = randn(nT+1, 1)
% For portability, hard-code the input data
v = [ ...
    0.5377    1.8339   -2.2588    0.8622    0.3188 ...
    1.3077   -0.4336    0.3426    3.5784    2.7694 ...
   -1.3499    3.0349    0.7254   -0.0631    0.7147 ...
   -0.2050   -0.1241    1.4897    1.4090    1.4172 ...
    0.6715   -1.2075    0.7172    1.6302    0.4889 ...
    1.0347    0.7269   -0.3034    0.2939   -0.7873 ...
    0.8884   -1.1471   -1.0689   -0.8095   -2.9443 ...
    1.4384    0.3252   -0.7549    1.3703   -1.7115 ...
   -0.1022   -0.2414    0.3192    0.3129   -0.8649 ...
   -0.0301   -0.1649    0.6277    1.0933    1.1093 ...
   -0.8637    0.0774   -1.2141   -1.1135   -0.0068 ...
    1.5326   -0.7697    0.3714   -0.2256    1.1174 ...
   -1.0891    0.0326    0.5525    1.1006    1.5442 ...
    0.0859   -1.4916   -0.7423   -1.0616    2.3505 ...
   -0.6156    0.7481   -0.1924    0.8886   -0.7648 ...
   -1.4023   -1.4224    0.4882   -0.1774   -0.1961 ...
    1.4193    0.2916    0.1978    1.5877   -0.8045 ...
    0.6966    0.8351   -0.2437    0.2157   -1.1658 ...
   -1.1480    0.1049    0.7223    2.5855   -0.6669 ...
    0.1873   -0.0825   -1.9330   -0.4390   -1.7947 ...
    0.8404
]';
assert(isequal(size(v), [nT+1 1]))
ym = y + sigma .* v;

figure(2); clf
make_iodplot(y, ym, t, e, {'e'}, {'y', 'ym'})

figure(3); clf
plot_correlogram_auto_conf(ym)
save_fig_to_pdf(fullfile(plot_dir, 'correlogram_auto1.pdf'))

% Simulate MA process
t = (0:nT)';
b = [1 0.5];
a = 1;
y = filter(b, a, e);

% Add noise
sigma = 0.5;
ym = y + sigma .* v;

figure(4); clf
make_iodplot(y, ym, t, e, {'e'}, {'y', 'ym'})

figure(5); clf
maxlag = 10;
plot_correlogram_auto_conf(ym, '', maxlag)
save_fig_to_pdf(fullfile(plot_dir, 'correlogram_auto2.pdf'))


%% Cross-correlogram plot

data = readtable('test_data/tsdata2.csv');
figure(6)
plot_correlogram_x_with_conf(data.y1, data.u1)
save_fig_to_pdf(fullfile(plot_dir, 'correlogram_auto1.pdf'))


close all